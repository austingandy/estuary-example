# Collections each represent a dataset that may be continuously updated
collections:
  temperature/sensors:
    schema: schemas.yaml#/$defs/tempSensor
    key: [/id]
  temperature/readings:
    schema:  schemas.yaml#/$defs/tempReadings
    key: [/sensorId, /timestamp]
  temperature/average-by-location:
    schema: schemas.yaml#/$defs/locationTemps
    key: [/sensorId]
    derivation:
      register:
        schema: schemas.yaml#/$defs/averageTempsRegister
        # All registers will start out with a default locationName. This allows us to publish
        # aggregates based on readings that are received before the sensor information has been
        # processed
        initial: { locationName: null }

      transform:
        sensors:
          # The sensors transform does not declare a shuffle key because the key of the sensors
          # collection is already what we want here.
          source: {name: temperature/sensors}
          update: {lambda: typescript}
          publish: {lambda: typescript}
        readings:
          source: {name: temperature/readings}
          # The shuffle key determines the key of the register that's associated with each
          # document, so we shuffle both sensors and readings on the sensor id, which allows 
          # us to access state that's associated with each sensor
          shuffle: {key: [/sensorId]}
          update: {lambda: typescript}
          publish: {lambda: typescript}
          